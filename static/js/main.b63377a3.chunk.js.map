{"version":3,"sources":["redux/robots.types.js","robots/robotCard.jsx","redux/robots.actions.js","robots/robots.jsx","robots/addRobot.jsx","App.js","reportWebVitals.js","redux/robots.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["RobotActionTypes","connect","dispatch","removeRobot","robot","type","payload","name","email","website","imageUrl","id","className","src","alt","onClick","Robots","props","state","console","log","this","robots","length","map","React","Component","AddRobot","submitRobot","e","preventDefault","undefined","Math","floor","random","encodeURIComponent","addRobot","alert","htmlFor","value","onChange","setState","target","placeholder","data","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","robotsReducer","action","filter","obj","combineReducers","middlewares","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b63377a3.chunk.js","sourcesContent":["export const RobotActionTypes = {\r\n  ADD_ROBOT: \"ADD_ROBOT\",\r\n  REMOVE_ROBOT: \"REMOVE_ROBOT\",\r\n};\r\n","import React from \"react\";\r\nimport { removeRobot } from \"../redux/robots.actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst RobotCard = ({\r\n  robot: { name, email, website, imageUrl, id },\r\n  removeRobot,\r\n}) => (\r\n  <div className=\"robot-card\">\r\n    <div className=\"robot-image\">\r\n      <img src={imageUrl || \"http://placehold.it/300\"} alt=\"robot\" />\r\n    </div>\r\n    <div className=\"robot-info\">\r\n      <ul>\r\n        <li>{name}</li>\r\n        <li>{email}</li>\r\n        <li>{website}</li>\r\n      </ul>\r\n    </div>\r\n    <div className=\"button\" onClick={() => removeRobot(id)}>\r\n      REMOVE CARD\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // dispatching actions returned by action creators\r\n    removeRobot: (robot) => dispatch(removeRobot(robot)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RobotCard);\r\n","import { RobotActionTypes } from \"./robots.types\";\r\n\r\nexport const addRobot = (robot) => ({\r\n  type: RobotActionTypes.ADD_ROBOT,\r\n  payload: robot,\r\n});\r\n\r\nexport const removeRobot = (robot) => ({\r\n  type: RobotActionTypes.REMOVE_ROBOT,\r\n  payload: robot,\r\n});\r\n","import React from \"react\";\r\nimport \"./robots.styles.scss\";\r\n\r\nimport RobotCard from \"./robotCard\";\r\n\r\nimport { connect } from \"react-redux\";\r\nclass Robots extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    debugger;\r\n    console.log(this.props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"robots robot-cards\">\r\n        {this.props.robots.length ? (\r\n          this.props.robots.map((robot) => (\r\n            <RobotCard key={robot.id || 0} robot={robot} />\r\n          ))\r\n        ) : (\r\n          <div className=\"message\"> YOU HAVE NO ROBOTS.</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  robots: state.robots.robots,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Robots);\r\n","import React from \"react\";\r\nimport { addRobot } from \"../redux/robots.actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass AddRobot extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { robot } = this.props;\r\n    console.log(robot);\r\n  }\r\n\r\n  submitRobot = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"BUtTON CLICKED\");\r\n\r\n    if (\r\n      this.state.email === undefined ||\r\n      this.state.name === undefined ||\r\n      this.state.website === undefined\r\n    ) {\r\n      alert(\"You must fill out all fields!\");\r\n      return;\r\n    }\r\n\r\n    let robot = this.state;\r\n\r\n    robot.id = Math.floor(Math.random() * (1000 - 0 + 1));\r\n    robot.imageUrl =\r\n      \"https://robohash.org/\" + encodeURIComponent(this.state.name);\r\n\r\n    this.props.addRobot(robot);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add-robot\">\r\n        <div className=\"robot-form\">\r\n          <form className=\"pure-form pure-form-aligned\">\r\n            <fieldset>\r\n              <div className=\"pure-control-group\">\r\n                <label htmlFor=\"aligned-email\">Name</label>\r\n                <input\r\n                  value={this.state.name}\r\n                  onChange={(e) => this.setState({ name: e.target.value })}\r\n                  type=\"email\"\r\n                  id=\"aligned-name\"\r\n                  placeholder=\"Name\"\r\n                />\r\n              </div>\r\n              <div className=\"pure-control-group\">\r\n                <label htmlFor=\"aligned-email\">Email Address</label>\r\n                <input\r\n                  value={this.state.email}\r\n                  onChange={(e) => this.setState({ email: e.target.value })}\r\n                  type=\"email\"\r\n                  id=\"aligned-email\"\r\n                  placeholder=\"Email Address\"\r\n                />\r\n              </div>\r\n              <div className=\"pure-control-group\">\r\n                <label htmlFor=\"aligned-email\">Website</label>\r\n                <input\r\n                  value={this.state.website}\r\n                  onChange={(e) => this.setState({ website: e.target.value })}\r\n                  type=\"email\"\r\n                  id=\"aligned-email\"\r\n                  placeholder=\"Website\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"pure-controls\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"pure-button pure-button-primary\"\r\n                  onClick={(e) => this.submitRobot(e)}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const addRobot = () => ({ type: \"ADD_ROBOT\" });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // dispatching actions returned by action creators\r\n    addRobot: (robot) => dispatch(addRobot(robot)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddRobot);\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Robots from \"./robots/robots\";\nimport AddRobot from \"./robots/addRobot\";\n\nlet data = {\n  name: \"test\",\n  email: \"123\",\n  website: \"test web\",\n  imageUrl: \"http://placehold.it/500\",\n  id: 0,\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Robots Redux</h1>\n        <Robots />\n        <AddRobot robot={data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { RobotActionTypes } from \"./robots.types\";\r\nconst INITIAL_STATE = {\r\n  robots: [\r\n    {\r\n      name: \"Big Ted\",\r\n      email: \"bigted44@test.com\",\r\n      website: \"www.test.com\",\r\n      imageUrl: \"https://placekitten.com/500\",\r\n      id: 0,\r\n    },\r\n  ],\r\n};\r\n\r\nconst robotsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case RobotActionTypes.ADD_ROBOT:\r\n      debugger;\r\n      return {\r\n        ...state,\r\n        robots: [...state.robots, action.payload],\r\n      };\r\n    case RobotActionTypes.REMOVE_ROBOT:\r\n      debugger;\r\n      return {\r\n        ...state,\r\n        robots: [...state.robots.filter((obj) => action.payload !== obj.id)],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default robotsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport robotsReducer from \"./robots.reducer\";\r\n\r\nexport default combineReducers({\r\n  robots: robotsReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst middlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}